module Calculator( //Full module that uses a multiplexor

	parameter N = 4;
    input [3:0] op_select, //Selects the operation using 4 bits 
    input [N-1:0] operand1, 
    input [N-1:0] operand2,
    output logic [2*N:0] result
);

    // Declare instances of different calculator modules
	 
	 sumador #(N) mysumador( .num1(operand1), .num2(operand2), .Resul(result)); //Addition
	 restador #(N) myrestador(.num1(operand1), .num2(operand2), .Result(result)); //Substraction
	 multiplicador #(N) mymultiplicador(.a(operand1), .b(operand2), .result(result)); //Multiplication
	 Divisor #(N) mydivisor(.dividend(operand1), .divisor(operand2), .quotient(result)); //Division
	 //Module
	 andoperation #(N) myand(.a(operand1), .b(operand2), .result(result)); //AND
	 oroperator #(N) myor(.a(operand1), .b(operand2), .result(result)); //OR
	 xoroperator #(N) myxor(.a(operand1), .b(operand2), .result(result)); //XOR
	 shiftleft #(N) myshiftl(.a(operand1), .b(operand2), .result(result)); //Shift left
	 shiftright #(N) myshiftr(.a(operand1), .b(operand2), .result(result)); //Shift left
	 
	
	//This creates the selection based on op_select, after number 10 repeats some operations
    always_comb begin
        case(op_select)
            4'b0000: result = mysumador.Resul; // Addition
            4'b0001: result = myrestador.Result; // Subtraction
            4'b0010: result = mymultiplicador.result; // Multiplication
            4'b0011: result = mydivisor.quotient; // Division
				4'b0100: result = mydivisor.remainder; // Module
            4'b0101: result = myand.result; // AND
            4'b0110: result = myor.result; // OR
            4'b0111: result = myxor.result; // XOR
				4'b1000: result = myshiftl.result; // Shift left
            4'b1001: result = myshiftr.result; // Shiftright
            4'b1010: result = myand.result; // AND
            4'b1011: result = myor.result; // OR
				4'b1100: result = myxor.result; // XOR
            4'b1101: result = myshiftl.result; // Shift left
            4'b1110: result = myshiftr.result; // Shiftright
            4'b1111: result = mysumador.Resul; // Addition
            default: result = 8'h00; // Default case 
        endcase
    end

endmodule
